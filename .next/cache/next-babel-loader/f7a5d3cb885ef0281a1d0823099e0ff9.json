{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n  const {\n    children,\n    classes,\n    onClose\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"onClose\"]);\n\n  return __jsx(MuiDialogTitle, _extends({\n    disableTypography: true,\n    className: classes.root\n  }, other), __jsx(Typography, {\n    variant: \"h6\"\n  }, children), onClose ? __jsx(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose\n  }, __jsx(CloseIcon, null)) : null);\n});\nconst DialogActions = withStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1)\n  }\n}))(MuiDialogActions);\nexport default function ContactMeForm({\n  open,\n  handleClose\n}) {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n\n  const handleEmail = e => {\n    e.preventDefault();\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        title,\n        message\n      })\n    };\n    fetch('/api/sendemail', requestOptions).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n    handleClose();\n  };\n\n  return __jsx(\"div\", null, __jsx(Dialog, {\n    onClose: handleClose,\n    \"aria-labelledby\": \"contact-me-title\",\n    open: open\n  }, __jsx(DialogTitle, {\n    id: \"contact-me-title\",\n    onClose: handleClose\n  }, \"Contact me\"), __jsx(\"form\", {\n    onSubmit: e => handleEmail(e)\n  }, __jsx(FormControl, {\n    variant: \"outlined\",\n    className: \"w-100\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"name-input\"\n  }, \"Name\"), __jsx(OutlinedInput, {\n    required: true,\n    id: \"name-input\",\n    value: name,\n    onChange: e => {\n      setName(e.target.value);\n    },\n    className: \"textFieldMargin\",\n    label: \"Name\"\n  })), __jsx(FormControl, {\n    variant: \"outlined\",\n    className: \"w-100\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"email-input\"\n  }, \"Email\"), __jsx(OutlinedInput, {\n    required: true,\n    id: \"email-input\",\n    value: email,\n    onChange: e => {\n      setEmail(e.target.value);\n    },\n    className: \"textFieldMargin\",\n    label: \"Email\"\n  })), __jsx(FormControl, {\n    variant: \"outlined\",\n    className: \"w-100\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"title-input\"\n  }, \"Title\"), __jsx(OutlinedInput, {\n    required: true,\n    id: \"title-input\",\n    value: title,\n    onChange: e => {\n      setTitle(e.target.value);\n    },\n    className: \"textFieldMargin\",\n    label: \"Title\"\n  })), __jsx(FormControl, {\n    variant: \"outlined\",\n    className: \"w-100\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"message-input\"\n  }, \"Message\"), __jsx(OutlinedInput, {\n    required: true,\n    id: \"message-input\",\n    value: message,\n    onChange: e => {\n      setMessage(e.target.value);\n    },\n    multiline: true,\n    rows: 4,\n    label: \"Message\"\n  })), __jsx(DialogActions, null, __jsx(Button, {\n    autoFocus: true,\n    type: \"submit\",\n    color: \"primary\"\n  }, \"Email me\")))));\n}","map":null,"metadata":{},"sourceType":"module"}